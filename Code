#include <WiFi.h>
#include <Arduino_GFX_Library.h>

#define TFT_SCK    18
#define TFT_MOSI   23
#define TFT_MISO   19
#define TFT_CS     22
#define TFT_DC     21
#define TFT_RESET  17
const int Bat = 34;
  Arduino_ESP32SPI bus = Arduino_ESP32SPI(TFT_DC, TFT_CS, TFT_SCK, TFT_MOSI, TFT_MISO);
  Arduino_ILI9341 display = Arduino_ILI9341(&bus, TFT_RESET);

void setup() 
{ 
  int BatValue = 0; 
  display.begin();
  display.setRotation(2);
  display.fillScreen(BLACK);
  display.setTextSize(2);
/////////////////////////////////////////
 BatValue = analogRead(Bat);
      display.setCursor(50, 120);
      if (BatValue <= 1148) {
        display.setTextColor(RED);
        display.print("BATTERY LOW");
  }
    else if (BatValue >= 1240){
    
          display.setTextColor(GREEN);
          display.print("BATTERY full");
    }
          else if (BatValue > 1148 and BatValue < 1240){
        
              display.setTextColor(YELLOW);
              display.print("BATTERY 50%");
          }
          delay(5000);
          display.fillScreen(BLACK);
///////////////////////////////
  display.setCursor(45, 0);
  display.setTextSize(3);
  display.setTextColor(WHITE);
  display.println("MR.GLASS");
  display.setCursor(35, 150);
  display.setTextSize(2);
  display.setTextColor(BLUE);
  display.println("AP_WIFI_SCANNER");
  display.setCursor(95, 165);
  display.setTextColor(WHITE);
  display.println("V1.1");
 
  delay(8000);
  display.setRotation(2);
  display.fillScreen(BLACK);
  display.setTextSize(1);
  display.setTextColor(GREEN);
  
  
  WiFi.mode(WIFI_STA);
  WiFi.disconnect(); // Disconnect from any previously connected network
  int numNetworks = WiFi.scanNetworks();
  display.setCursor(0, 0);
  display.println("Scanning for WiFi networks...");
  delay(5000);
  if (numNetworks == 0) {
    display.setCursor(0, 0);
    display.println("No networks found.");
  } else {
    display.setCursor(0, 20);
    display.println("Found: ");
    display.setCursor(40, 20);
    display.print(numNetworks);
    display.setCursor(0, 35);
    display.println("networks:");
    for (int i = 0; i < numNetworks; ++i) {
      display.setCursor(0, 80+20*i);
      display.print(WiFi.SSID(i));
      display.setCursor(180, 80+20*i);
      display.print(" (");
      display.setCursor(192, 80+20*i);
      display.print(WiFi.RSSI(i));
      display.setCursor(210, 80+20*i);
      display.println(" dBm)");
    }
  }
  delay(5000);
}
void loop() {
  
  WiFi.mode(WIFI_STA);
  WiFi.disconnect(); // Disconnect from any previously connected network
  int numNetworks = WiFi.scanNetworks();
  display.fillScreen(BLACK);
  if (numNetworks == 0) {
    display.setCursor(20, 20);
    display.println("No networks found.");
  } else {
    display.setCursor(0, 0);
    display.print("Found: ");
    display.setCursor(40, 0);
    display.print(numNetworks);
    display.setCursor(0, 20);
    display.println("networks:");
      for (int i = 0; i < numNetworks; ++i) {
        display.setCursor(0, 40+20*i);
        display.print(WiFi.SSID(i));
        display.setCursor(150, 40+20*i);
        display.print(" (");
        display.setCursor(162, 40+20*i);
        display.print(WiFi.RSSI(i));
        display.setCursor(180, 40+20*i);
        display.println(" dBm)");
        display.setCursor(210, 40+20*i);
        display.println("| ");
        display.setCursor(219, 40+20*i);
        display.print(WiFi.channel(i));
      }
  }
    delay(5000);
    display.fillScreen(BLACK);
    if (numNetworks == 0) {
    display.setCursor(20, 20);
    display.println("No networks found.");
    }
    else {
      display.setCursor(0, 0);
      display.print("Found: ");
      display.setCursor(40, 0);
      display.print(numNetworks);
      display.setCursor(0, 20);
      display.println("Network Security Protocol:");
      for (int i = 0; i < numNetworks; ++i) {
        display.setCursor(0, 40+20*i);
        display.print(WiFi.SSID(i));
        display.setCursor(150, 40+20*i);
        display.print(" (");
        display.setCursor(162, 40+20*i);
        switch (WiFi.encryptionType(i)) {
          case WIFI_AUTH_OPEN:            display.print("open"); break;
          case WIFI_AUTH_WEP:             display.print("WEP"); break;
          case WIFI_AUTH_WPA_PSK:         display.print("WPA"); break;
          case WIFI_AUTH_WPA2_PSK:        display.print("WPA2"); break;
          case WIFI_AUTH_WPA_WPA2_PSK:    display.print("WPA+WPA2"); break;
          case WIFI_AUTH_WPA2_ENTERPRISE: display.print("WPA2-EAP"); break;
          case WIFI_AUTH_WPA3_PSK:        display.print("WPA3"); break;
          case WIFI_AUTH_WPA2_WPA3_PSK:   display.print("WPA2+WPA3"); break;
          case WIFI_AUTH_WAPI_PSK:        display.print("WAPI"); break;
          default:                        display.print("unknown");
        }
        display.setCursor(189, 40+20*i);
        display.println("    )");
        display.println();
        delay(10);

      }
    }
  
  
 
  // Delete the scan result to free memory
  WiFi.scanDelete();
  delay(5000);
}
